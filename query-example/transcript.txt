------- SLIDES all the way to REST demo

== Rest ==

- Show all (overfetch)
- Show single (underfetch)

------- BACK TO SLIDES HERE (Introduce GraphQL)

== GraphQL ==

- Modify Query (person)
- Show schema
- Show that there is no score
- Add Source (score)

------- BACK TO SLIDES HERE (show compare to REST)

== Batch ==

List<String> ids = people.stream().map(Person::getIdNumber).collect(Collectors.toList());

== Multiple requests ==

@Inject
ExchangeRateService exchangeRateService;

    public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){
        return exchangeRateService.getExchangeRate(against,person.getCurencyCode());    
    }
    
ADD WEATHER FROM FILE

{
  person(id: 1){
    names
    surname
    scores {
      name
      value
    }
    exchangeRate(against:GBP){
      rate
    }
  }
  weather(city:"London"){
    currentTemp
    description
  }
}

== Concurrent requests ==

CompletableFuture.supplyAsync(() -> personService.getPerson(id));

and

getFutureExchangeRate


{
  person(id:1){
    names
    surname
    gbp:exchangeRate(against:GBP){
      rate
    }
    usd:exchangeRate(against:USD){
      rate
    }
  }
  uk:weather(city:"London"){
    currentTemp
    description
  }
  us:weather(city:"New York"){
    currentTemp
    description
  }
}

== Errors and partial response ==

return CompletableFuture.failedStage(new ExchangeRateNotAvailableException("Exchange rate system is down"));

{
  person(id: 1){
    names
    surname
    exchangeRate(against:GBP){
      rate
    }
  }
}


------- BACK TO SLIDES HERE

== Mutation ==

    @Mutation
    public Person updateOrCreatePerson(Person person){
        return personService.updateOrCreate(person);
    }

    @Mutation
    public Person deletePerson(Long id){
        return personService.delete(id);
    }
    
mutation CreatePerson{
  updateOrCreatePerson(person :
    {
      names: "Phillip"
    }
  ){
    id
    names
    surname
    profilePictures
    website
  }
}

mutation UpdatePerson{
  updateOrCreatePerson(person :
    {
      id: 201,
      names:"Phillip",
      surname: "Kruger",
      profilePictures: [
        "https://pbs.twimg.com/profile_images/1311017429242437636/CbUoiAeP_400x400.jpg"
      ],
      website: "http://www.phillip-kruger.com"
    }){
    id
    names
    surname
    profilePictures
    website
  }
}

== Subscription ==

    @Subscription
    public Multi<PersonDatabaseEvent> personDatabaseEvent(){
        return personService.getPersonDatabaseEventListener();
    }

subscription PersonEvent {
  personDatabaseEvent {
    event
    person{
      names
    }
  }
}


== Introspection ==

{
  __schema {
    types{
      name
      kind
    }
  }
}

== Security ==

@RolesAllowed("user")
(add on scores)

{
  "authorization": "Bearer "
}

== Transformation and mapping ==

On birthdate: @DateFormat("dd/MM/yyyy")
On id: @AdaptToScalar(Scalar.Int.class)
On phone @AdaptToScalar(Scalar.String.class)
On address @AdaptWith(AddressAdapter.class)
